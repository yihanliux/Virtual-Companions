# 这是一个 CODEOWNERS 文件。
# 它的目的是定义谁负责审查对仓库中特定文件或目录的修改。
# 当有人提交 Pull Request 时，GitHub 会根据这个文件的规则，自动请求相应负责人的审查。
#
# 这个文件对于帮助新成员了解“我应该找谁来 review 我的代码”非常有帮助。
#
# 语法很简单：[文件或目录模式] [@GitHub用户名] [@GitHub用户名2]
# 规则的顺序很重要，后面的规则会覆盖前面的规则。


# =========================================================================
# --- 全局所有者 (Global Owner) ---
# =========================================================================
#
# 这是当前项目中唯一生效的规则。
# “*”代表所有文件。这里我们指定项目所有者 @yihanliux 是所有文件的审查者。
# 任何 Pull Request 都需要 @yihanliux 的批准才能合并。

* @yihanliux @MDIIS


# =========================================================================
# --- 【示例】按技术栈或文件类型划分 (未来可以启用) ---
# =========================================================================
#
# 当团队成员有不同专长时，我们可以按文件类型分配负责人，解除下面这些规则的注释即可。
# 这样可以让最懂这部分代码的人来审查，提高审查质量。

# 所有的前端文件（HTML, CSS, JavaScript）都由 @frontend-expert 负责。
# *.html @frontend-expert
# *.css   @frontend-expert
# *.js    @frontend-expert

# 所有的 Python 脚本，我们希望由 @yihanliux 和另一位核心开发者 @python-core-dev 共同负责。
# *.py    @yihanliux @python-core-dev


# =========================================================================
# --- 【示例】按重要文件或目录划分 (未来可以启用) ---
# =========================================================================
#
# 我们可以为更具体、更重要的文件或目录设置负责人，这会覆盖上面更宽泛的规则。

# 项目的主程序 app.py，作为最核心的文件，必须由项目所有者 @yihanliux 亲自审查。
# /app.py @yihanliux

# 所有文档相关的修改（即 /docs/ 目录下的所有文件），由 @doc-writer 负责。
# /docs/  @doc-writer

# 项目的依赖配置文件，非常重要，由项目所有者 @yihanliux 负责，确保依赖不出问题。
# /requirements.txt @yihanliux

# GitHub Actions 的工作流文件，涉及自动化流程，由 @yihanliux 负责。
# /.github/workflows/ @yihanliux